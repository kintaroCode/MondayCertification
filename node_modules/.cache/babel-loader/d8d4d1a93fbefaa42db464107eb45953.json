{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isrrael.rios\\\\view_board_certification\\\\src\\\\App.js\";\nimport React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./App.css\";\nimport { eventWrapper } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjE2MDg0Njc5MCwidWlkIjozMDMxOTI1MCwiaWFkIjoiMjAyMi0wNS0xN1QwMToxNzowNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6NzcxNzE2NywicmduIjoidXNlMSJ9.X7R9ymORVX0CcbbBotMLdk_VjPmjfBWszsrkAvhUa3s\");\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      cities: [\"hola\"],\n      setData: {},\n      settings: {},\n      myData: {\n        boards: []\n      },\n      cityWeathers: []\n    };\n    this.cityName = [];\n  }\n\n  componentDidMount() {\n    monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}').then(res => {\n      console.log(this.setState({\n        myData: res.data\n      }));\n      this.state.myData.boards.map(board => {\n        board.items.map(item => {\n          console.log(item);\n          fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=${item.column_values[3].text}&aqi=no`).then(res => res.json()).then(json => {\n            let cityWeather = {\n              name: json.location.name,\n              temp_c: json.current.temp_c,\n              temp_f: json.current.temp_f,\n              //condicion: json.current.condicion.icon,\n              localTime: json.current.localTime //icon: json.current.condicion.text\n\n            };\n            let cityWeathers = [...this.state.cityWeathers, cityWeather];\n            this.setState({\n              cityWeathers\n            });\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      cityWeathers\n    } = this.state;\n    const {\n      myData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: [console.log(cityWeathers), cityWeathers.map(city => /*#__PURE__*/_jsxDEV(WeatherCard, {\n              className: \"cards\",\n              name: city.name\n            }, city.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* //        const { myData } = this.state;\n//         return (\n//       <div className=\"App\">\n//        const citiesAux =[];        \n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {JSON.stringify(this.state.myData)}\n//             {this.state.myData.boards}\n//             {console.log(myData.boards)}\n//             <div className=\"col-md-4\">  \n//               {\n//                 cities.length === 0? (<h3>Loading . . .</h3> ) :\n//                 cities.map((el) => (\n//                   <div className=\"cardsRow\">\n//                     <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n//                               icon={el.weatherIcon} localtime={el.localtime}/>\n//                   </div>          \n//                 ))\n//               }       \n// {/*         \n//       //       <s\n      \n                \n      \n//       //     </div>\n//       //   </div>\n//       <div>\n//         {JSON.stringify(myData.boards)}\n//         { myData.boards.map( (board) => {\n//         board.items.map((item) => citiesAux.push(item.column_values[3].text) )})} \n//         {\n//           citiesAux.forEach((el) =>(\n//             <WeatherCard data={el}> </WeatherCard>           \n//           ))\n//         }\n//        {/* {console.log(citiesAux)} \n//        {console.log(this.state.cities)}  */","map":{"version":3,"names":["React","mondaySdk","WeatherCard","eventWrapper","monday","setToken","App","Component","constructor","props","state","cities","setData","settings","myData","boards","cityWeathers","cityName","componentDidMount","api","then","res","console","log","setState","data","map","board","items","item","fetch","column_values","text","json","cityWeather","name","location","temp_c","current","temp_f","localTime","render","city"],"sources":["C:/Users/isrrael.rios/view_board_certification/src/App.js"],"sourcesContent":["import React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./App.css\";\nimport { eventWrapper } from \"@testing-library/user-event/dist/utils\";\n\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjE2MDg0Njc5MCwidWlkIjozMDMxOTI1MCwiaWFkIjoiMjAyMi0wNS0xN1QwMToxNzowNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6NzcxNzE2NywicmduIjoidXNlMSJ9.X7R9ymORVX0CcbbBotMLdk_VjPmjfBWszsrkAvhUa3s\")\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Default state\n    this.state = {\n      cities: [\"hola\"],\n      setData: {},\n      settings: {},\n      myData: { boards: [] },\n      cityWeathers:[]\n    };\n    this.cityName =[];\n      \n  }\n \n  componentDidMount() {         \n  monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}')\n  .then((res) => {  \n                  console.log(this.setState({myData:res.data}));\n                  this.state.myData.boards.map((board) => {\n                    board.items.map((item) =>{\n                      console.log(item); \n                      fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=${item.column_values[3].text}&aqi=no`)\n                      .then((res) => res.json())\n                      .then((json) => {\n                        let cityWeather ={\n                          name: json.location.name,\n                          temp_c:json.current.temp_c,\n                          temp_f:json.current.temp_f,\n                          //condicion: json.current.condicion.icon,\n                          localTime: json.current.localTime,\n                          //icon: json.current.condicion.text\n                        };\n                        let cityWeathers = [...this.state.cityWeathers, cityWeather];\n                        this.setState({cityWeathers});\n                      })\n                    })}\n                  )\n                  }\n    ) \n  }\n\n      \n       \n  render(){    \n        const {cityWeathers} = this.state; \n        const { myData } = this.state;\n        \n        return(           \n            <div className=\"App\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-md-4\">  \n                    {\n                      console.log(cityWeathers)}\n                     { cityWeathers.map((city) => \n                      <WeatherCard key={city.name} className=\"cards\" name={city.name}/>)\n                    }\n                  \n                                           \n                                   \n                      {/* cities.map((el) =>(                        \n                      <div className=\"cardsRow\"> hola\n                        <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n                               icon={el.weatherIcon} localtime={el.localtime}/>\n                      </div>))\n                    }        */} \n                  </div>\n                </div>\n              </div>\n            </div>\n            )\n        \n    }\n}\n\n/* //        const { myData } = this.state;\n//         return (\n//       <div className=\"App\">\n//        const citiesAux =[];        \n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {JSON.stringify(this.state.myData)}\n//             {this.state.myData.boards}\n//             {console.log(myData.boards)}\n//             <div className=\"col-md-4\">  \n//               {\n//                 cities.length === 0? (<h3>Loading . . .</h3> ) :\n//                 cities.map((el) => (\n//                   <div className=\"cardsRow\">\n//                     <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n//                               icon={el.weatherIcon} localtime={el.localtime}/>\n//                   </div>          \n//                 ))\n//               }       \n// {/*         \n//       //       <s\n      \n                \n      \n//       //     </div>\n//       //   </div>\n//       <div>\n//         {JSON.stringify(myData.boards)}\n//         { myData.boards.map( (board) => {\n//         board.items.map((item) => citiesAux.push(item.column_values[3].text) )})} \n//         {\n//           citiesAux.forEach((el) =>(\n//             <WeatherCard data={el}> </WeatherCard>           \n//           ))\n//         }\n//        {/* {console.log(citiesAux)} \n//        {console.log(this.state.cities)}  */\n     \n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}