{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isrrael.rios\\\\view_board_certification\\\\src\\\\App.js\";\nimport React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./App.css\";\nimport { eventWrapper } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjE2MDg0Njc5MCwidWlkIjozMDMxOTI1MCwiaWFkIjoiMjAyMi0wNS0xN1QwMToxNzowNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6NzcxNzE2NywicmduIjoidXNlMSJ9.X7R9ymORVX0CcbbBotMLdk_VjPmjfBWszsrkAvhUa3s\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      cities: {},\n      setData: {},\n      settings: {},\n      myData: {\n        boards: []\n      },\n      cityWeathers: []\n    };\n    this.cityName = [];\n  }\n\n  componentDidMount() {\n    //   monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}')\n    //   .then((res) => { this.setState({myData:res.data})})\n    //  this.state.myData.boards.map((board) =>\n    //   board.items.map((item) => (this.cityName.push(item.column_values[3].text))).then((item) => {this.setState({cities:item})}))\n    //   console.log(this.cityName)\n    //   console.log(typeof(this.cityName))\n    const getWeather = async () => {\n      let res = await monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}');\n      res.data.boards.map(async board => {\n        board.items.forEach(async item => {\n          await this.setState.cities.push(item.column_values[3].text); //await this.setState({cities:cityName})}) \n        });\n        console.log(this.state.cities);\n      });\n      this.state.cities.map(async el => {\n        let json = await fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=${el}&aqi=no`);\n        json = await json.json();\n        console.log(json);\n        let city = {\n          name: json.location.name,\n          localtime: json.location.localtime,\n          temperaturaC: json.current.temp_c,\n          temperaturaF: json.current.temp_f,\n          weatherIcon: json.current.condition.icon,\n          condition: json.current.condition.text\n        };\n        let cities = [...this.state.cities, city];\n        this.setState({\n          cities\n        });\n        console.log(cities);\n      });\n      getWeather();\n    };\n  } //   this.cityName.forEach((el) => fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=caracas&aqi=no`)\n  //   .then(res => res.json())\n  //   .then(json => { console.log(json);\n  //                   let weather={\n  //                     name:json.location.name,\n  //                     localtime: json.location.localtime,\n  //                     temp_c: json.current.temp_c,\n  //                     temp_f: json.current.temp_f,\n  //                     condition: json.current.condition[0].text,\n  //                     conditionIcon: json.current.condition[0].icon,\n  //                   }    ;\n  //                   console.log(weather);\n  //                   this.setState({weathers.push(weather) });\n  //   }))   \n  // }\n\n\n  render() {\n    const {\n      cities\n    } = this.state;\n    const {\n      myData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: this.cities.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardsRow\",\n              children: [\" hola\", /*#__PURE__*/_jsxDEV(WeatherCard, {\n                className: \"cards\",\n                name: el.name,\n                temp_c: el.temp_c,\n                temp_f: el.temp_f,\n                icon: el.weatherIcon,\n                localtime: el.localtime\n              }, el.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* //        const { myData } = this.state;\n//         return (\n//       <div className=\"App\">\n//        const citiesAux =[];        \n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {JSON.stringify(this.state.myData)}\n//             {this.state.myData.boards}\n//             {console.log(myData.boards)}\n//             <div className=\"col-md-4\">  \n//               {\n//                 cities.length === 0? (<h3>Loading . . .</h3> ) :\n//                 cities.map((el) => (\n//                   <div className=\"cardsRow\">\n//                     <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n//                               icon={el.weatherIcon} localtime={el.localtime}/>\n//                   </div>          \n//                 ))\n//               }       \n// {/*         \n//       //       <s\n      \n                \n      \n//       //     </div>\n//       //   </div>\n//       <div>\n//         {JSON.stringify(myData.boards)}\n//         { myData.boards.map( (board) => {\n//         board.items.map((item) => citiesAux.push(item.column_values[3].text) )})} \n//         {\n//           citiesAux.forEach((el) =>(\n//             <WeatherCard data={el}> </WeatherCard>           \n//           ))\n//         }\n//        {/* {console.log(citiesAux)} \n//        {console.log(this.state.cities)}  */\n\n\nexport default App;","map":{"version":3,"names":["React","mondaySdk","WeatherCard","eventWrapper","monday","setToken","App","Component","constructor","props","state","cities","setData","settings","myData","boards","cityWeathers","cityName","componentDidMount","getWeather","res","api","data","map","board","items","forEach","item","setState","push","column_values","text","console","log","el","json","fetch","city","name","location","localtime","temperaturaC","current","temp_c","temperaturaF","temp_f","weatherIcon","condition","icon","render"],"sources":["C:/Users/isrrael.rios/view_board_certification/src/App.js"],"sourcesContent":["import React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./App.css\";\nimport { eventWrapper } from \"@testing-library/user-event/dist/utils\";\n\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjE2MDg0Njc5MCwidWlkIjozMDMxOTI1MCwiaWFkIjoiMjAyMi0wNS0xN1QwMToxNzowNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6NzcxNzE2NywicmduIjoidXNlMSJ9.X7R9ymORVX0CcbbBotMLdk_VjPmjfBWszsrkAvhUa3s\")\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Default state\n    this.state = {\n      cities: {},\n      setData: {},\n      settings: {},\n      myData: { boards: [] },\n      cityWeathers:[]\n    };\n    this.cityName =[];\n      \n  }\n\n  \n \n  componentDidMount() {         \n  //   monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}')\n  //   .then((res) => { this.setState({myData:res.data})})\n    \n  //  this.state.myData.boards.map((board) =>\n  //   board.items.map((item) => (this.cityName.push(item.column_values[3].text))).then((item) => {this.setState({cities:item})}))\n    \n  //   console.log(this.cityName)\n  //   console.log(typeof(this.cityName))\n    const getWeather = async() =>\n      { let res = await monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}');\n            res.data.boards.map(async (board) => {\n                board.items.forEach( async (item) => {\n                    await this.setState.cities.push(item.column_values[3].text);\n                    //await this.setState({cities:cityName})}) \n                  })\n              console.log(this.state.cities)\n            })\n              this.state.cities.map(async(el) => {\n              let json = await fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=${el}&aqi=no`)\n              json = await json.json();\n              console.log(json);\n              let city={                            \n                name: json.location.name,\n                localtime: json.location.localtime,\n                temperaturaC:json.current.temp_c,\n                temperaturaF:json.current.temp_f,\n                weatherIcon:json.current.condition.icon,\n                condition: json.current.condition.text\n                \n               };\n              let cities =[...this.state.cities, city]\n              this.setState({cities});\n              console.log(cities)\n            })\n\n      getWeather();\n    }\n  }\n  //   this.cityName.forEach((el) => fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=caracas&aqi=no`)\n  //   .then(res => res.json())\n  //   .then(json => { console.log(json);\n  //                   let weather={\n  //                     name:json.location.name,\n  //                     localtime: json.location.localtime,\n  //                     temp_c: json.current.temp_c,\n  //                     temp_f: json.current.temp_f,\n  //                     condition: json.current.condition[0].text,\n  //                     conditionIcon: json.current.condition[0].icon,\n  //                   }    ;\n  //                   console.log(weather);\n                    \n  //                   this.setState({weathers.push(weather) });\n  //   }))   \n    \n  // }\n\n\n      \n       \n      render(){    \n        const {cities} = this.state; \n        const { myData } = this.state;\n        \n        return(           \n            <div className=\"App\">\n              <div className=\"container\">\n                <div className=\"row\">\n                \n                  <div className=\"col-md-4\">  \n                    {\n                      \n                      this.cities.map((el) =>(                        \n                      <div className=\"cardsRow\"> hola\n                        <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n                               icon={el.weatherIcon} localtime={el.localtime}/>\n                      </div>))\n                    }       \n                  </div>\n                </div>\n              </div>\n            </div>\n            )\n        \n      }\n}\n\n\n\n/* //        const { myData } = this.state;\n//         return (\n//       <div className=\"App\">\n//        const citiesAux =[];        \n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {JSON.stringify(this.state.myData)}\n//             {this.state.myData.boards}\n//             {console.log(myData.boards)}\n//             <div className=\"col-md-4\">  \n//               {\n//                 cities.length === 0? (<h3>Loading . . .</h3> ) :\n//                 cities.map((el) => (\n//                   <div className=\"cardsRow\">\n//                     <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n//                               icon={el.weatherIcon} localtime={el.localtime}/>\n//                   </div>          \n//                 ))\n//               }       \n// {/*         \n//       //       <s\n      \n                \n      \n//       //     </div>\n//       //   </div>\n//       <div>\n//         {JSON.stringify(myData.boards)}\n//         { myData.boards.map( (board) => {\n//         board.items.map((item) => citiesAux.push(item.column_values[3].text) )})} \n//         {\n//           citiesAux.forEach((el) =>(\n//             <WeatherCard data={el}> </WeatherCard>           \n//           ))\n//         }\n//        {/* {console.log(citiesAux)} \n//        {console.log(this.state.cities)}  */\n     \n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}