{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isrrael.rios\\\\view_board_certification\\\\src\\\\App.js\";\nimport React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./App.css\";\nimport { eventWrapper } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjE2MDg0Njc5MCwidWlkIjozMDMxOTI1MCwiaWFkIjoiMjAyMi0wNS0xN1QwMToxNzowNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6NzcxNzE2NywicmduIjoidXNlMSJ9.X7R9ymORVX0CcbbBotMLdk_VjPmjfBWszsrkAvhUa3s\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      cities: [],\n      setData: {},\n      settings: {},\n      myData: {\n        boards: []\n      },\n      cityWeathers: []\n    };\n    this.cityName = [];\n  }\n\n  componentDidMount() {\n    // monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}')\n    // .then((res) => { this.setState({myData:res.data})})\n    // this.state.myData.boards.map((board) =>\n    // board.items.map((item) => ( this.citiName.push(item.column_values[3].text))))\n    const getWeather = async () => {\n      let res = await monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}');\n      res.data.boards.map(async board => {\n        board.items.forEach(async item => {\n          await this.cityName.push(item.column_values[3].text)(cityName => {\n            this.setState({\n              cities: cityName\n            });\n          });\n          console.log(this.state.cities);\n        });\n      });\n      let json = await fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=${cities.column_values[3].text}&aqi=no`);\n      json = await json.json();\n      console.log(json);\n      let city = {\n        name: json.location.name,\n        localtime: json.location.localtime,\n        temperaturaC: json.current.temp_c,\n        temperaturaF: json.current.temp_f,\n        weatherIcon: json.current.condition.icon,\n        condition: json.current.condition.text\n      };\n      let cities = [...this.state.cities, city];\n      this.setState({\n        cities\n      });\n      console.log(cities);\n    };\n\n    getWeather();\n  } //   this.cityName.forEach((el) => fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=caracas&aqi=no`)\n  //   .then(res => res.json())\n  //   .then(json => { console.log(json);\n  //                   let weather={\n  //                     name:json.location.name,\n  //                     localtime: json.location.localtime,\n  //                     temp_c: json.current.temp_c,\n  //                     temp_f: json.current.temp_f,\n  //                     condition: json.current.condition[0].text,\n  //                     conditionIcon: json.current.condition[0].icon,\n  //                   }    ;\n  //                   console.log(weather);\n  //                   this.setState({weathers.push(weather) });\n  //   }))   \n  // }\n\n\n  render() {\n    const {\n      cities\n    } = this.state;\n    const {\n      myData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: this.cities.length === 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Loading . . .\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 50\n            }, this) : cities.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardsRow\",\n              children: /*#__PURE__*/_jsxDEV(WeatherCard, {\n                className: \"cards\",\n                name: el.name,\n                temp_c: el.temp_c,\n                temp_f: el.temp_f,\n                icon: el.weatherIcon,\n                localtime: el.localtime\n              }, el.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* //        const { myData } = this.state;\n//         return (\n//       <div className=\"App\">\n//        const citiesAux =[];        \n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {JSON.stringify(this.state.myData)}\n//             {this.state.myData.boards}\n//             {console.log(myData.boards)}\n//             <div className=\"col-md-4\">  \n//               {\n//                 cities.length === 0? (<h3>Loading . . .</h3> ) :\n//                 cities.map((el) => (\n//                   <div className=\"cardsRow\">\n//                     <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n//                               icon={el.weatherIcon} localtime={el.localtime}/>\n//                   </div>          \n//                 ))\n//               }       \n// {/*         \n//       //       <s\n      \n                \n      \n//       //     </div>\n//       //   </div>\n//       <div>\n//         {JSON.stringify(myData.boards)}\n//         { myData.boards.map( (board) => {\n//         board.items.map((item) => citiesAux.push(item.column_values[3].text) )})} \n//         {\n//           citiesAux.forEach((el) =>(\n//             <WeatherCard data={el}> </WeatherCard>           \n//           ))\n//         }\n//        {/* {console.log(citiesAux)} \n//        {console.log(this.state.cities)}  */\n\n\nexport default App;","map":{"version":3,"names":["React","mondaySdk","WeatherCard","eventWrapper","monday","setToken","App","Component","constructor","props","state","cities","setData","settings","myData","boards","cityWeathers","cityName","componentDidMount","getWeather","res","api","data","map","board","items","forEach","item","push","column_values","text","setState","console","log","json","fetch","city","name","location","localtime","temperaturaC","current","temp_c","temperaturaF","temp_f","weatherIcon","condition","icon","render","length","el"],"sources":["C:/Users/isrrael.rios/view_board_certification/src/App.js"],"sourcesContent":["import React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./App.css\";\nimport { eventWrapper } from \"@testing-library/user-event/dist/utils\";\n\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjE2MDg0Njc5MCwidWlkIjozMDMxOTI1MCwiaWFkIjoiMjAyMi0wNS0xN1QwMToxNzowNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6NzcxNzE2NywicmduIjoidXNlMSJ9.X7R9ymORVX0CcbbBotMLdk_VjPmjfBWszsrkAvhUa3s\")\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Default state\n    this.state = {\n      cities: [],\n      setData: {},\n      settings: {},\n      myData: { boards: [] },\n      cityWeathers:[]\n    };\n    this.cityName =[];\n      \n  }\n\n  \n \n  componentDidMount() {         \n    // monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}')\n    // .then((res) => { this.setState({myData:res.data})})\n    \n    // this.state.myData.boards.map((board) =>\n    // board.items.map((item) => ( this.citiName.push(item.column_values[3].text))))\n\n    const getWeather = async() =>\n      { let res = await monday.api('query { boards( ids : 2664704591 ) { items { id : name column_values { text }}}}');\n            res.data.boards.map(async (board) => {\n                board.items.forEach( async (item) => {\n                    await this.cityName.push(item.column_values[3].text)\n                    ((cityName) => { this.setState({cities:cityName})})\n              console.log(this.state.cities)\n            })})            \n            let json = await fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=${cities.column_values[3].text}&aqi=no`)\n              json = await json.json();\n              console.log(json);\n              let city={                            \n                name: json.location.name,\n                localtime: json.location.localtime,\n                temperaturaC:json.current.temp_c,\n                temperaturaF:json.current.temp_f,\n                weatherIcon:json.current.condition.icon,\n                condition: json.current.condition.text\n                \n               };\n              let cities =[...this.state.cities, city]\n              this.setState({cities});\n              console.log(cities)}\n\n      getWeather();\n              }\n  //   this.cityName.forEach((el) => fetch(`http://api.weatherapi.com/v1/current.json?key=c156f7f2a3d84ae0861121630223006&q=caracas&aqi=no`)\n  //   .then(res => res.json())\n  //   .then(json => { console.log(json);\n  //                   let weather={\n  //                     name:json.location.name,\n  //                     localtime: json.location.localtime,\n  //                     temp_c: json.current.temp_c,\n  //                     temp_f: json.current.temp_f,\n  //                     condition: json.current.condition[0].text,\n  //                     conditionIcon: json.current.condition[0].icon,\n  //                   }    ;\n  //                   console.log(weather);\n                    \n  //                   this.setState({weathers.push(weather) });\n  //   }))   \n    \n  // }\n\n\n      \n       \n      render(){    \n        const {cities} = this.state; \n        const { myData } = this.state;\n        return(           \n            <div className=\"App\">\n              <div className=\"container\">\n                <div className=\"row\">\n                \n                  <div className=\"col-md-4\">  \n                    {\n                      this.cities.length === 0? (<h3>Loading . . .</h3> ) :\n                      cities.map((el) =>(                        \n                      <div className=\"cardsRow\">\n                        <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n                               icon={el.weatherIcon} localtime={el.localtime}/>\n                      </div>))\n                    }       \n                  </div>\n                </div>\n              </div>\n            </div>\n            )\n        \n      }\n}\n\n\n\n/* //        const { myData } = this.state;\n//         return (\n//       <div className=\"App\">\n//        const citiesAux =[];        \n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {JSON.stringify(this.state.myData)}\n//             {this.state.myData.boards}\n//             {console.log(myData.boards)}\n//             <div className=\"col-md-4\">  \n//               {\n//                 cities.length === 0? (<h3>Loading . . .</h3> ) :\n//                 cities.map((el) => (\n//                   <div className=\"cardsRow\">\n//                     <WeatherCard className=\"cards\" key={el.name} name={el.name} temp_c={el.temp_c} temp_f={el.temp_f}\n//                               icon={el.weatherIcon} localtime={el.localtime}/>\n//                   </div>          \n//                 ))\n//               }       \n// {/*         \n//       //       <s\n      \n                \n      \n//       //     </div>\n//       //   </div>\n//       <div>\n//         {JSON.stringify(myData.boards)}\n//         { myData.boards.map( (board) => {\n//         board.items.map((item) => citiesAux.push(item.column_values[3].text) )})} \n//         {\n//           citiesAux.forEach((el) =>(\n//             <WeatherCard data={el}> </WeatherCard>           \n//           ))\n//         }\n//        {/* {console.log(citiesAux)} \n//        {console.log(this.state.cities)}  */\n     \n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}